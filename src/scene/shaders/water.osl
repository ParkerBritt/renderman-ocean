float fit(float value, float oldmin, float oldmax, float newmin, float newmax)
{
    return newmin + (value - oldmin) * (newmax - newmin) / (oldmax - oldmin);
}

shader water (
                float scale=1,
                float height=1,
                output	color outDiffuse=0,
                output vector outDisplacement= vector(0,1,0)
            )
{
 
    int waveNum = 30;
    int waveDirNum = 20;

    float c = 1;
    float t = 0 * c;


    float x = 0;
    float y = 0;

    float baseWaveLength = 2;
    float baseAmp = 0.005;

    float offsetForEachDir = 20.8;

    float offset = 17.2;


    float amp = height;
    float frequency = scale;
    for (int i = 0;  i < waveDirNum;  ++i) {
        float angle = noise("hash", i);
        angle *= 2.0 * M_PI;
        vector dir = vector(cos(angle),0, sin(angle));

        float dirOffset = 20;
        float offset = noise("hash", i+6072) * dirOffset;

        float a = dot(P, dir);
            

        for(int j = 0; j < waveNum; ++j){
            float waveLength = baseWaveLength / (j + 1) * fit(noise("hash", i+10),0,1,0.5,1.5);
            float amplitude = baseAmp / (j + 1) * fit(noise("hash", i+5),0,1,0.2,2);
            offset += noise("hash", j+826) * offset;


            float k = 2 * M_PI / waveLength;
            float theta = k * a + t + offset;

            x = amplitude * sin(theta);
            y -= amplitude * cos(theta);
            outDisplacement += x*dir;
        }
    }




    // big waves
    for(int i=0; i<5; i++)
    {
        float bigWaveAngle = noise("hash", 9682) * 2.0 * M_PI;
        float bigWaveStretch = 0.01;
        vector bigWaveDir = vector(cos(bigWaveAngle)*bigWaveStretch,1, sin(bigWaveAngle)*bigWaveStretch);

        int bigWaveNum = 3;
        vector bigWaveMaskPos = P;
        bigWaveMaskPos += noise("hash", 238+i)*100;
        // change frequency of noise
        bigWaveMaskPos*= 0.03;
        float bigWaveMask = smoothstep(0, 1, clamp(fit(noise("perlin", bigWaveMaskPos), 0, 1, 0 ,1),0,1));
        // bigWaveMask = 1;

        float angleVariation = 0.1;
        float angle = noise("hash", 10)+noise("hash", i)*angleVariation;
        angle *= 2.0 * M_PI;
        vector dir = vector(cos(angle),0, sin(angle));

        float dirOffset = 20;
        offset = noise("hash", 6072) * dirOffset;

        float a = dot(P, dir);

        baseWaveLength = 30;
        baseAmp = 0.2;

        for(int j = 0; j < bigWaveNum; ++j){
            float waveLength = baseWaveLength / (j + 1) * fit(noise("hash", j+10),0,1,0.5,1.5);
            float amplitude = baseAmp / (j + 1) * fit(noise("hash", j+5),0,1,0.2,2);
            offset += noise("hash", j+826) * offset;


            float k = 2 * M_PI / waveLength;
            float theta = k * a + t + offset;

            x = amplitude * sin(theta);
            y -= amplitude * cos(theta)*bigWaveMask;
            outDisplacement += x*dir;
        }
    }
    outDisplacement.y = y;



    // outDiffuse=color(0.286, 0.353, 0.337);
    float diffuseMixAlpha = fit(dot(N, vector(0,1,0)), -1, 1, -50, 1);
    diffuseMixAlpha = clamp(diffuseMixAlpha, 0, 1);
    color diffuseColorLow = color(0.286, 0.350, 0.237);
    color diffuseColorHigh = color(0.596, 0.722, 0.784);
    diffuseColorLow *= 0.3;
    diffuseColorHigh *= 0.3;
    // diffuseColorHigh = color(1,0,0);
    outDiffuse = mix(diffuseColorLow, diffuseColorHigh, diffuseMixAlpha);



}
